困った時の小技

●データの読み込み
・csvやtxt等ならpandasかな

import pandas as pd
import os

os.chdir(r'\Users\圭太\Desktop\work\python\20170929_Python機械学習プログラミング 達人データサイエンティストによる理論と実践\ch08') # ファイルが置いてあるディレクトリに移動
df = pd.read_csv(r'./movie_data.csv', encoding="cp932") # ファイル読み込み(cp932はshift-jisの日本における文字コードを意味する)


・ndarray形式(numpyの配列)のデータならnumpyを使うかな(npyという拡張子になる)
import numpy as np
import os

os.chdir(r'\Users\圭太\Desktop') # ファイルが置いてあるディレクトリに移動
df = np.load(r'hoge.npy') # ファイル読み込み(hogeがファイル名)


●データを出力
・csvにするならto_csv関数を使いましょう。

>> s
a    1
b    2
c    3
dtype: int64
>> s.to_csv('output.csv')

参考URL
https://openbook4.me/projects/183/sections/1101


・配列を出力するなら(モデル作成時等)
import numpy as np

x_data1 = np.random.rand(10,3).astype(np.float32)
np.save('test_x.npy', x_data1)


# numpy.save関数のapiについて説明===========================
numpy.save(file, arr, allow_pickle=True, fix_imports=True)

.npy形式で配列を保存します。

params:

パラメータ名	             型	                           概要
file	                ファイルまたはstr          データを保存する先を指定します。 
                      またはファイルのパス	   拡張子は.npyです。
allow_pickle	            bool値	           (省略可能)初期値True
                                                   Pythonのモジュールであるpickleを使用して配列情報を保存するかどうかを指定します。pickleを使用するといろんなコードが実行できてしまうので、セキュリティの観点からここをFalseにすることがあります。
fix_imports	            bool値	          (省略可能)初期値True
                                                   Python2でも扱えるような形式にするかどうかを指定します。
arr	                   array_like
                  配列に相当するオブジェクト	   保存する配列。

●pandasでread_csvができない
①encodeに問題があるかも...
encode='shit-jis'等で指定していてもエラーがでることがある。
OSが悪さをしている可能性が高い。
(マルチバイトを使わないとすべての文字列を表現できない国ごとに文字コードが変わっているみたいです)
日本の場合は「cp932」を指定しないといけない

例
os.chdir(r'\Users\圭太\Desktop\work\python\20170929_Python機械学習プログラミング 達人データサイエンティストによる理論と実践\ch08')
df = pd.read_csv(r'./movie_data.csv', encoding="cp932")

ちなみに、上記の国ごとの文字コードの確認方法は下記。
import locale
print(locale.getpreferredencoding(False))

参考にしたURLは下記
http://www.tekito-gottani.com/entry/2016/10/03/183527


●実行しているファイルのディレクトリを取得
下記のURLを参照しました。
https://qiita.com/nagamee/items/b7d1b02074293fdfdfff

「os」ライブラリを使います。
import os

・ファイル名
os.__file__

・相対パス
os.path.dirname(__file__)

・絶対パス(ファイル名含む)
os.path.abspath(__file__)

・絶対パス(ファイル名含まない)
os.path.dirname(os.path.abspath(__file__))


●仮想環境の構築
異なるバージョンのPythonを使うとか、開発時とかに作ることになるかと。
(tensorflowを使おうとしたら、python3.5までしか対応していなかったので作りました)
基本的に「condaプロンプト」で実行します。

・作成した環境のリスト
conda info --envs

・指定したpythonのバージョンで環境を構築
conda create --name myenv python=3.3
# 追加のパッケージを入れたい場合は下記のようにパッケージ名を追記する
# conda create --name myenv numpy scipy
# conda create --name myenv anaconda


・既存環境のクローンを作成する(myenv,が新しく作成する環境の名前)
conda create --name clonedenv --clone myenv

・環境を切り替える(myenv,が切り替え先の環境名)
windows   : activate myenv
Linux,OS X: source activate myenv 

・環境から出る
windows   : deactivate 
Linux,OS X: source deactivate

・環境を消す
conda remove --name myenv --all


参考URL
http://minus9d.hatenablog.com/entry/2016/01/29/235916


もしくは「Anaconda Navigator」を使ってもいいかもしれない


●condaコマンド
# conda自体のアップデート
$ conda update conda

# 仮想環境の作成
$ conda create --name <仮想環境名>  python=<バージョン>

# 仮想環境の削除
$ conda remove -n <仮想環境名> --all

# 仮想環境の確認
$ conda info -e

# インストールされているパッケージの一覧を表示
$ conda list

# パッケージの検索
$ conda search <パッケージ名>

# 特定のチャンネル内に存在するパッケージの検索
$ conda search -c <チャンネル名> <パッケージ名>

# 全てのチャンネル内でパッケージの検索
$ anaconda search -t conda <パッケージ名>

# パッケージのインストール
$ conda install <パッケージ名>

# 特定のチャンネル内に存在するパッケージのインストール
$ conda install -c <チャンネル名> <パッケージ名>

# パッケージのインストール(バージョン指定)
$ conda install <パッケージ名>=<バージョン>

# パッケージのアンインストール
$ conda uninstall <パッケージ名>


●jupyterで利用する環境を変更する(カーネルの移動)
condaプロンプトで操作する。
環境を作成したのち、下記のコマンドを実行すること。

# 利用可能なカーネルの表示
$ jupyter kernelspec list

# 仮想環境をアクティベート
$ activate test

# カーネルを追加
$ ipython kernel install --user --name=test --display-name=test

これで、jupyter上でカーネルを選択できるようになる。
ちなみに、--userオプションを付けていた場合、~\AppData\Roaming\jupyter\kernelsの中に追加したカーネルが置かれています。
なので、追加したカーネルを削除する際は、この名前のフォルダを削除してください。


参考URL
https://qiita.com/tomochiii/items/8b937f15c79a0c3eae0e



